AAA: arrange, act, assert

Структура теста выглядит так:

    в секции подготовки тестируемая система (system under test, SUT) и ее зависимости приводятся в нужное состояние;

    в секции действия вызываются методы SUT, передаются подготовленные зависимости и сохраняется выходное значение (если оно есть);

    в секции проверки проверяется результат, который может быть представлен возвращаемым значением, итоговым состоянием тестируемой системы. 
	
Когда присутствует несколько секций действий, разделенных секциями проверки и, возможно, секциями подготовки, это означает, что тест проверяет несколько единиц поведения. Такой тест уже не является юнит-тестом — это интеграционный тест. Такой структуры тестов лучше избегать. Если вы видите тест, содержащий серию действий и проверок, отрефакторите его: выделите каждое действие в отдельный тест. 	
Наличие в тестах команды if также является антипаттерном. Тест — неважно, юнит- или интеграционный — должен представлять собой простую последовательность шагов без ветвлений.
Секция действия обычно состоит всего из одной строки кода. Если действие состоит из двух и более строк, это может указывать на проблемы с API тестируемой системы.
Изменение одного теста не должно влиять на другие тесты. Чтобы следовать этому правилу, необходимо избегать совместного состояния (shared state) в классах тестов.
Выделяя общий код инициализации в приватные фабричные методы, можно сократить код теста с сохранением полного контекста того, что происходит в этом тесте. Более того, приватные методы не связывают тесты друг с другом, при условии, что они достаточно гибкие (то есть позволите тестам указать, как должны создаваться тестовые данные).

Examples:

[Fact]
public void Purchase_succeeds_when_enough_inventory()
{
  // Arrange
  var store = new Store();
  store.AddInventory(Product.Shampoo, 10);
  var customer = new Customer();
  
  // Act
  bool success = customer.Purchase(store, Product.Shampoo, 5);
  
  // Assert
  Assert.True(success);
  Assert.Equal(5, store.GetInventory(Product.Shampoo));
}

***********

public class CustomerTests
{
  [Fact]
  public void Purchase_succeeds_when_enough_inventory()
  {
    Store store = CreateStoreWithInventory(Product.Shampoo, 10);
    Customer sut = CreateCustomer();
    
    bool success = sut.Purchase(store, Product.Shampoo, 5);
    
    Assert.True(success);
    Assert.Equal(5, store.GetInventory(Product.Shampoo));
  }
  
  [Fact]
  public void Purchase_fails_when_not_enough_inventory()
  {
    Store store = CreateStoreWithInventory(Product.Shampoo, 10);
    Customer sut = CreateCustomer();
    
    bool success = sut.Purchase(store, Product.Shampoo, 15);
    
    Assert.False(success);
    Assert.Equal(10, store.GetInventory(Product.Shampoo));
  }
  
  private Store CreateStoreWithInventory(Product product, int quantity)
  {
    Store store = new Store();
    store.AddInventory(product, quantity);
    return store;
  }
  
  private static Customer CreateCustomer()
  {
  	return new Customer();
  }
}





	
	
GWT: Given-When-Then

Этот паттерн также рекомендует разбить тест на три части:

Given — соответствует секции подготовки (arrange);

When — соответствует секции действия (act);

Then — соответствует секции проверки (assert)



Рекомендации по именованию юнит-тестов:

Не следуйте жесткой структуре именования тестов. Высокоуровневое описание сложного поведения не удастся втиснуть в узкие рамки такой структуры. Сохраняйте свободу самовыражения.
Выбирайте имя теста так, словно вы описываете сценарий непрограммисту, знакомому с предметной областью задачи (например, бизнес-аналитику).
Разделяйте слова, например, символами подчеркивания. Это поможет улучшить читаемость, особенно длинных имен.
Также обратите внимание на то, что, хотя автор использует паттерн [ИмяКласса]Tests при выборе имен классов тестов, это не означает, что тесты ограничиваются проверкой только этого класса. Юнитом в юнит-тестировании является единица поведения, а не класс. Единица поведения может охватывать один или несколько классов. Рассматривайте класс в [ИмяКласса]Tests как точку входа — API, при помощи которого можно проверить единицу поведения.